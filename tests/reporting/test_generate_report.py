import os
import unittest
from unittest.mock import MagicMock, patch

from parma_analytics.reporting.generate_report import ReportGenerator


class TestReportGenerator(unittest.TestCase):
    """Test case to check summary generated by GPT."""

    @patch("parma_analytics.reporting.generate_report.OpenAI")
    def test_generate_report_summary(self, mock_openai):
        """Test case to check summary generated by GPT."""
        mock_api_key = os.environ.get("OPENAI_API_KEY")
        mock_openai.return_value.api_key = mock_api_key

        mock_response = MagicMock()
        mock_response.choices[0].text = "Mocked summary text"
        mock_openai.return_value.completions.create.return_value = mock_response

        report_generator = ReportGenerator()

        report_params = {
            "company_name": "Mocked Company",
            "source_name": "Mocked Source",
            "timeframe": 10,
            "metric_name": "Mocked Metric",
            "trigger_change": 5.0,
            "current_value": 42.0,
        }
        result = report_generator.generate_report_summary(report_params)

        mock_openai.assert_called_once_with(api_key=mock_api_key)
        self.assertEqual(result, "Mocked summary text")
